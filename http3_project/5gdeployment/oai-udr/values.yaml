kubernetesType: Vanilla  #Vanilla for community kubernetes distribution

nfimage:
  repository: docker.io/oaisoftwarealliance/oai-udr # image name either locally present or in a public/private repository
  version: v1.5.0 #image tag, develop tag for experimental features 
  #pullPolicy: IfNotPresent or Never or Always
  pullPolicy: IfNotPresent

tcpdumpimage:
  repository: docker.io/corfr/tcpdump
  version: latest
  #pullPolicy: IfNotPresent or Never or Always
  pullPolicy: IfNotPresent

proxyimage:
  repository: tolgaomeratalay/biproxy
  version: 2.6
  pullPolicy: IfNotPresent

imagePullSecrets: 
  - name: "regcred"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "oai-udr10-sa"

#service type is fixed to clusterIP, it is only support for non multus interface (eth0)

podSecurityContext:
  runAsUser: 0
  runAsGroup: 0

securityContext:
  privileged: false

service:
  type: ClusterIP
  http1Port: 80
  http2Port: 8080

start:
  udr: true
  tcpdump: false #start tcpdump collection to analyse but beware it will take a lot of space in the container/persistent volume
  proxy: false

config:
  tz: "Europe/Paris"
  instance: "0"
  udrname: "oai-udr"
  pidDirectory: "/var/run"
  sbiIfName: "eth0"
  sbiPortHttp1: "80"
  sbiPortHttp2: "8080"
  udrApiVersion: "v1"
  nrfIpv4Address: "127.0.0.1"
  nrfPort: "80"
  nrfApiVersion: "v1"
  nrfFqdn: "oai-nrf10-svc"
  registerNrf: "no"
  usehttp2: "no"
  useFqdnDns: "yes"
  mySqlServer: "mysql"
  mySqlUser: "root"
  mySqlPass: "linux"
  mySqlDb: "oai_db"

proxyconfig:
  saname: "udr10"
  sasubfunc: "udr"
  saip: "127.0.0.1" # this is currently set to podIP in the source code
  saloc: "local"
  sak8sdns: "oai-udr10-svc"
  savnftype: "udr"
  savnfid: "udr1"
  sasliceid: "1"
  streamscpip: "stream-scp1-svc"
  streamscpport: "10090"
  randomize: "1"
  loglevel: "trace"
  clientcount: "0"
  multireg: "1"
  operationmode: "5G_SA"
  valmethod: "NONE"
  routemethod: "SCP"
  useotel: "NO" # set to yes for integrating with an OpenTelemetry node. SVC fixed for now
  lbmet: "round-robin" #load balancing method -- set to [pick2 ; round-robin]
  maxret: "3" #failover retry count
  reqtime: "100" #request timeout duration (ms)
  tokfetch: "TRUE" #condition for always fetching tokens, bypasses token cache for testing
  nrfresplocal: "FALSE" #condition for local response to NRF discovery requests using the map
  usediscontimeout: "TRUE" #condition for re-discovery upon timeout on failed outgoing requests -- FALSE for 5G_STREAM


persistence:
  sharedvolume: false
  volumneName: managed-nfs-storage
  size: 1Gi
  
resources:
  define: false
  limits:
    tcpdump:
      cpu: 100m
      memory: 128Mi
    nf:
      cpu: 100m
      memory: 128Mi
  requests:
    tcpdump:
      cpu: 100m
      memory: 128Mi
    nf:
      cpu: 100m
      memory: 128Mi

readinessProbe: false

livenessProbe: false

terminationGracePeriodSeconds: 5

nodeSelector:
  type: az

nodeName:

